정보처리산업기사 취득과정, W6 Day4.
									
[TODAY] 추상클래스 / 인터페이스 
	상담
	조별, 중간점검: 스토리보드 --> JavaProgramming2020@gmail.com
----------------------------------------------------------------
예상.
6주.
7주.
8주. 데이터베이스 공부 마무리.
9주. 내부평가:DB 관련 과목.
10주. 화면 단 끝.
11주. 서버개발.
...
16주. 웹프로젝트 발표회 예정.
-----------------------------------------------------------------
	예외처리 = 내일.
남은 내용:
	중첩클래스
	쓰레드
	제너릭 / 컬렉션프레임워크
	파일I/O
-----------------------------------------------------------------
다형성.
Ex2001. 다형성 + instanceof연산자.
	[참조변수 instanceof 클래스이름] ---> 그 [참조변수]가 참조하는 객체가
						[클래스이름]의 객체냐? --> true/false
	[정리] 	클래스 형변환 : "(클래스이름)참조변수"
		★ 클래스 형변환은 "부모-자식 관계에서만!"
	  	  그렇지 않으면, ClassCastException이라는 예외가 발생!  (뒤에서)
		따라서, 보다 안전한 [클래스 형변환]을 하려면,
		instanceof연산자를 사용.

	[정리] 	그래서, instanceof연산자는 (무조건) 클래스 형변환 하고 같이 가세요.

	(고급) a instanceof B ----------> '父-子'의 상황이 고려됨.

-----------------------------------------------------------------------------------
"접근제어자"("Access Modifier". 접근제한자. 접근제어지시자)
day20.Test
day20b.Test
	"public , private , ..."
		(추가1) (default) : 동일 패키지 안에서는 접근이 가능.
		(추가2) protected : 동일 패키지 안에서 접근이 가능.
				    다른 패키지라 하더라도 자식클래스 안에서는 접근이 가능.
			"protected = (default) + child"
	[정리] 접근제어자 : private < (default) + protected < public
	[어려워요!] -------> private과 public만 정확하게 + "default는 동일패키지 안에서만"

	[정리] 필드나 메서드에는 4가지 접근제어자가,
		클래스에는 2가지(public, (default)) 접근제어자가 적용 가능.

----------------------------------------------------------------------------------
final 키워드 ---> 3군데: 변수 / 메서드 / 클래스
	[정리] 	변수 선언 앞에 final 키워드 -----> "상수"
		메서드 정의 앞에 final ----------> 메서드 오버라이드 금지
		클래스 정의 앞에 final ----------> 클래스 상속 금지
	(ex) final int num = 5;
	     num = 10; // ERR.
Ex2002.

----------------------------------------------------------------------------------
package 선언.	"package 패키지명;"
	- 그 파일이 속해있는 패키지를 명시.
	- (default package)인 경우에는 생략 가능.

----------------------------------------------------------------------------------	
import 선언.	// "그냥 그렇게(클래스이름으로) 부르겠다는 선언"
	- (참고) *

Test2.

---------------------------------------------------------------------------------
명령프롬프트(cmd창)에서 자바프로그램을 어떻게 실행할까?
Ex2004.
	JDK설치 ----> 	① JRE (자바실행환경) : 자바프로그램을 실행하기 위해.
			② JDK (자바개발킷) : 자바프로그램을 만들기 위해.
	★ java ----> 자바프로그램을 실행 (자바가상머신)
		(ex) "java -version" ----> 자바 버전 출력
	javac ---> 자바컴파일러(.java ---> .class)
	이클립스에서 저장(.java) ----> 컴파일(javac) -----> .class    
						// 에러? -> "컴파일에러" -> 빨간색 밑줄로.

이렇게 해보세요:
1) 프로젝트 이름 위 우클릭 -> Properties -> Location항목을 복사(Ctrl+C)
2) 명령프롬프트 -> cd [붙여넣기 Ctrl+V]
3) dir
4) cd bin
5) dir
6) cd day20            // day20 : 패키지이름
7) dir -> 클래스이름 확인 : "Ex2004.class"
8) cd..
9) java day20.Ex2004


---------------------------------------------------------------------------------
추상클래스(Abstract Class).
Ex2003.
	'추상'(abstract) -> '미완성' 딱지. 
	메서드 정의시,  ①중괄호{} 대신에 세미콜론(;)을
			②리턴타입 앞에 abstract 키워드를.
	추상메서드를 하나라도 포함하고 있는 클래스는 
			--> (미완성설계도이므로) abstract 키워드를 반드시 붙여야 함.
	추상클래스로 객체 생성할 수 없음. (미완성설계도이므로)
		
-------------------------------------------------------------------------------------
Ex2005. 연습.
	추상클래스 Parent : 추상메서드 void message()
	자식클래스 Child1 : 오버라이드 message() --> 출력 : "첫 번째 클래스" 
	자식클래스 Child2 : 오버라이드 message() --> 출력 : "두 번째 클래스"

	main() :
		각 자식클래스들의 객체를 생성한 후, 각 객체의 message()를 호출.

	(실행결과)	첫 번째 클래스
			두 번째 클래스

	(추가:고급연습)	추상클래스 타입의 배열(사이즈 : 5)를 선언,
			난수발생해서 이 배열에 두 가지 객체(의 참조값)들을 채워주세요.
			그런 후에 반복문을 사용해서 모든 요소들의 message()를 호출해보세요.
	(실행결과)	첫 번째 클래스
			두 번째 클래스
			두 번째 클래스
			첫 번째 클래스
			두 번째 클래스
--------------------------------------------------------------------------------------
보충: ★ "메서드 오버라이드할 때, 접근제어자의 범위를 수정할 수 있음. 단, 접근의 범위를 넓히는 방향으로만!"
Ex2006.	(ex)	부모A(m()), 자식B(->m() 오버라이드) 상황
		class A {
			void m() { ... }
		}
		class B extends A {
			@Override
			void m() { ... }
		}

		// 영어 잘해요? ---> 1) 구글링 2) java api documentation
--------------------------------------------------------------------------------------
인터페이스(Interface)
	- 개념 : 추상클래스와 비슷함.
		-> 객체 생성할 수 없음. // 미완성일테니까 // 미완성인 부분이 있을테니까.
	- 본질 : ★(암기) "pa.psf."
	- (추가설명:JDK1.8부터) ... (중x)
Ex2007. 이해
Ex2008. 이해

(진심=나중에 보세요) :
	[정리] 추상클래스
		1. 객체생성X ---> "extends"하는 클래스가 필요.
		2. 추상클래스가 추상클래스를 상속할 수 있음. (클래스니까)
						(ex)	abstract class A { ... }
							abstract class B extends A { ... }
							class C extends B { ... }
Ex2010.		3. 다중상속이 불가능함.
		4. (보통은) 적어도 1개 이상의 추상메서드가 있다.
		5. (이해) 보통은, 유사한 개념의 클래스들로부터 공통의 멤버를 뽑아낼 때 사용. --> (자바의정석[7-17])

	[정리] 인터페이스
		1. 객체생성X ---> "implements"하는 클래스가 필요.
Ex2009.		2. 인터페이스가 인터페이스를 상속할 수 있음. 
		3. 다중상속이 가능함.
		4. 모든 변수는 public static final이고 모든 메서드는 public abstract임.(본질)
		5. (이해) 보통은, (추상)메서드만 선언해둠.

--------------------------------------------------------------------------------------------------------------------
										끝.












































