정보처리산업기사 취득과정, W9 Day2.

[TODAY] "데이터 입출력 구현"					
	자바진도 / 내부평가(다음 주 수요일) 대비 시작.
	- 중첩클래스
	- 예외처리
	프로젝트. 전체상담 시작.

------------------------------------------------------------------------------
(참고) 중첩클래스(Nested Class)
		- 내부클래스 / 스태틱클래스 / 로컬클래스 / ★★★익명클래스

4가지 분류 :
	중첩클래스 - static	: "스태틱 클래스" ①
		   - non-static : 1) ★"내부 클래스" ②
				  2) "로컬 클래스"  ③
			 	  3) ★★★"익명 클래스" ④

스태틱 vs 내부
Ex2101. "스태틱클래스(Static Class)"
Ex2102. ★"내부클래스(Inner Class)"

"로컬클래스(Local Class)"			cf. 지역변수(Local V~)
Ex2103.
---------------------------------------------------------------
★★★익명클래스(Anonymous Class) : (이해) "클래스정의 + 객체생성"
Ex2104(필수)
Ex2105(고급: 안 해도 돼요)

---------------------------------------------------------------
예외처리(Exception Handling)

Ex2106. (구경)
	*. 예외 발생 --> (기본적으로) ①'빨간글' ②프로그램강제중지
Ex2107. (구경)
Ex2108. (구경)

-------------------------------------------------------------------------
Ex2109. 
JVM: 

[정리] 예외처리 ('예외'를 '처리'하겠다는 것):
	try {
		// "try영역"
	} catch(___Exception e) {
		// "catch영역"
	}
	-----> try 영역에 있는 코드를 일단 실행해봄.
	-----> 실행 중에 예외발생시, 그러면 catch로 이동.
	-----> catch문 중에서 (위에서 아래로 훑으면서) 발생된 예외(객체)를
		받아줄 수 있는 참조변수를 찾는다('다형성'을 고려함). 
	-----> 찾았으면 해당 catch문을 실행하고
		빠져나옴.
	-----> catch문의 중괄호({)가 실행됐다는 것 = "예외가 해결되었다!"라고 봄.
	
	- 자바코드는 누가 실행하나요? 자바가상머신(JVM)
	- '예외'가 발생했다면, 반드시 누군가는 처리를 해야 함.
	  1) 개발자가 코드상에서 처리한 경우 : OK.
	  2) JVM이 처리하는 경우 : ① '빨' ② 강제종료.

---------------------------------------------------------------------------
Ex2110. 'finally' 키워드.
	--> try 영역으로 진입한 이상 그 무조건적인 실행을 보장받는 영역.

---------------------------------------------------------------------------
Ex2111. 'throw' 키워드 / 'throws' 키워드

					※ 예외 	- 1) 실행해봐야 비로소 보이는 예외 (95%)
						- 2) 빨간색 밑줄로 체크되는 예외 (5%)
	[정리] 	throw : 예외를 던져라. (=바로 여기서 예외('예외적인 상황')가 발생함)
		throws : 예외처리의 책임을 떠넘김.

----------------------------------------------------------------------------
※ 참고:	User-defined Exception ----> 내가 예외 클래스를 직접 정의할 수 있음.
	(ex) AgeException ---> "class AgeException extends Exception { ... }"

※ 참고: 다시 던질(=발생시킬) 수 있음 -------> "re-throw"
	(ex)
		try {
			... 예외 발생
		} catch(__그__예외__ e) {
			... 무언가 처리
			throw e;   // "re-throw"
		}
									// 16:06~
-----------------------------------------------------------------------------
						내일 : 학습모듈 "데이터 입출력 구현"		














