정보처리산업기사 취득과정, W7 Day2.

내부평가 내일 16:00~18:00 
---------------------------------------------------------------
ExJDBCTest3.
	1) JDBC 드라이버 파일 설치(프로젝트에 ojdbc6.jar를 적용)
	2) Class.forName(...)
	3) DriverManager.getConnection(접속url정보, 아이디, 비번)
	4) Connection / Statement / ResultSet
	   (Ex) 사원들 중에서 급여(salary)가 14000 이상인 사원들의
	  	"이름", "성", "급여(월)"을 출력.

---------------------------------------------------------------
(참고) 연결연산자 ||
	- 숫자 또는 문자열을 '하나의 문자열'로 결합함.
	- (ex) select first_name || ' ' || last_name from employees;

연습.	사원 테이블로부터 
	이름과 성을 합쳐서 급여를 조회.

----------------------------------------------------------------
(참고)	distinct : 중복 제거
		(ex) select job_id from employees;  // 의도: 사원테이블->모든 업무ID
		(ex) select distinct job_id from employees; // 중복 없이 출력됨
		(ex) select all job_id from employees;   // (default가 all이다)
	[이해] all vs distinct

연습1.	사원테이블에 어떤 "부서ID"가 있는지 조회 ----> 몇 개 있는지 파악.
				-- 컬럼명을 '부서ID'로
연습2.	사원테이블에 어떤 "매니저ID"가 있는지 조회 --> 몇 개 있는지 파악.
				-- 컬럼명을 '매니저ID'로

----------------------------------------------------------------
★ ORDER BY절 : 지정된 컬럼을 기준으로 정렬을 수행(오름차순/내림차순)
	- from절 뒤에.
	- ASC 오름차순 / DESC 내림차순 정렬
	- "ORDER BY 정렬대상컬럼명"
	  또는
	  "ORDER BY 정렬대상컬럼명 ASC"  (오름차순) = default
	  "ORDER BY 정렬대상컬럼명 DESC" (내림차순)
				select *    --------> select절
				from employes ------> from절

(이해)	정렬하지 않은(=ORDER BY절 언급이 없는) SELECT문의 출력 순서는 아무 의미 없다!

연습1.	사원의 "이름"(이름_성의 형식으로)을 급여가 높은 순서로 조회.   
						// 급여가 높은 사람부터.
연습2.	사원의 이름_성, 급여를 급여가 높은 순서로 조회.
						// 급여가 높은 사람부터.
연습3.	사원의 이름_성을 조회하되, 업무별로 묶어서(끼리끼리) 출력.

- 정렬기준은 둘 이상을 사용할 수도 있음.
연습4.	"부서별로" 사원의 부서ID, 이름_성, 급여를 조회하되,
	"급여가 높은 사원부터" 조회.
	- 1차 정렬기준 : 부서ID
	- 2차 정렬기준 : 급여 (내림차순)

------------------------------------------------------------------
연습5.	사원의 이름_성을 조회하되, 성을 기준으로 ABC순으로 정렬하여 조회.

연습6.	사원의 이름_성, 고용일을 조회하되, 최근에 고용된 사람 순으로 조회.

연습7.	부서별로 사원의 이름_성, 고용일, 부서ID를 조회하되, 
	부서별로 최근에 고용된 사람 순으로 조회.

-----------------------------------------------------------
★ WHERE절
	- 의미 : 'if문'
	- FROM절 뒤에. ORDER BY절 앞에
		SELECT *   --------> SELECT절
		FROM employees ----> FROM절
		WHERE ___조건식____  ----> WHERE절
		ORDER BY employee_id ----> ORDER BY절
	- 연산자 : > < >= <=
		   != <>
		   =   ( NOT == )

연습.	사원의 이름이 'Bruce'이고 성이 'Ernst'인 사원의
	이름_성, 급여, 이메일을 조회.

연습.	사원의 이름_성이 'Bruce Ernst'인 사원의
	이름_성, 급여, 이메일을 조회.

연습.	사원의 급여가 10000(달러) 이상인 사원의
	이름_성, 급여, 고용일을 조회.

연습.	사원의 부서ID가 100 이상인 사원의 
	이름_성, 부서ID를 조회하되,
	①부서별로 ②성을 기준으로 ABC순으로 조회.

※ "CRUD" : Create Read Update Delete
------------------------------------------------------
★★ "LIKE 검색" :
	- WHERE절에 LIKE 키워드를 사용.
	- 문자열의 일부만으로 검색할 때 사용.
		(ex) 'Steven' ----> 'St'로 시작하는지?
			      ----> 'eve'가 포함되어 있는지?
		(ex) 중고나라 ---> 내용에 '모니터' 포함 게시글 검색.
	- 와일드카드 문자 :
		_ : 딱 1개의 문자
		% : 0개 이상의 문자
	
연습1.	성이 K로 시작하는 사원의 이름_성, 폰번호를 조회.

연습2.	이름이 er로 끝나는 사원의 이름_성, 입사일을 조회.

연습3.	성이 4글자인 사원의 이름, 성을 조회.

----------------------------------------------------------------
(참고)	BETWEEN ... AND 연산자 (사용을 권장)
	- "컬럼명 BETWEEN 값1 AND 값2"
	- 컬럼의 값이 값1과 값2 사이에 있냐?
	- (=) "컬럼명 >= 값1 AND 컬럼명 <= 값2"
	- 단, 값1 < 값2

Ex.	급여가 8000달러 이상이면서 9000달러 이하인 사원의
	이름, 성, 급여, 입사일을 조회.

----------------------------------------------------------
(참고)	IN 연산자	(사용을 권장)
	- "컬럼명 IN (값1, 값2, 값3, ...)"
	- 의미 : 이들 중 하나라도 있으면...

Ex.	부서ID가 10, 20, 또는 30인 사원들의
	이름, 성, 급여, 부서ID를 조회.

연습.	(BETWEEN ... AND 연산자를 사용해서)
	※ 연봉 = (월급여 + 월급여 * 수수료율) * 12
	연봉이 $130000 이상 $150000 이하인 사원의
	이름, 성, 연봉, 부서ID를 조회하되,
	이름을 기준으로 ABC순으로 정렬하여 출력.

-----------------------------------------------------------
(참고)	DUAL (가상)테이블 --> 테이블이 필요 없을 때.
	"FROM DUAL" 만 사용해보세요.

------------------------------------------------------------
3가지:
	DDL(Data Definition Language) - ex) 테이블 생성
	DML(Data Manipulation Language) - CRUD
	DCL(Data Control Language) - "권한 부여"
				ex) "GRANT 권한 TO 유저명;"

------------------------------------------------------------
새로운 계정 생성 -- "CREATE USER"

(ex)	CREATE TABLE MEMBER       // 외부평가목적 암기(나중에)★
	(
	  ID VARCHAR2(20) 
	, PW NUMBER 
	, NAME VARCHAR2(20) 
	);

------------------------------------------------------------
테이블에 C(R)UD:
- C : 데이터 추가
- U : 데이터 수정
- D : 데이터 삭제

1. 데이터 추가 (INSERT문) ---> 무조건 행(row)이 하나 추가됨.
- "INSERT INTO 테이블이름(열1, 열2, ...) VALUES (값1, 값2, ...)"

2. 데이터 수정 (UPDATE문) ---> [암기] "UPDATE... SET... WHERE..."
- "UPDATE 테이블이름 SET 컬럼1=값1, 컬럼2=값2, ... WHERE 조건식"

3. 데이터 삭제 (DELETE문) ---> [암기] "DELETE FROM... WHERE..."
- "DELETE FROM 테이블이름 WHERE 조건식"

--------------------------------------------------------------------
Oracle: system

--alter user hr identified by hr;
create user user1026 identified by user1234;   -- 계정 생성
grant connect, resource to user1026;   -- (최소한의) 권한 부여

--------------------------------------------------------------------
Oracle: hr

select first_name || ' ' || last_name from employees;

-- 연습.	사원 테이블로부터 	이름과 성을 합쳐서 급여를 조회.
select (first_name || ' ' || last_name) "이름_성",
    salary 급여 
from employees;

select all job_id from employees;

--연습1.	사원테이블에 어떤 "부서ID"가 있는지 조회 ----> 몇 개 있는지 파악.
--				-- 컬럼명을 '부서ID'로
select distinct department_id from employees;

--연습2.	사원테이블에 어떤 "매니저ID"가 있는지 조회 --> 몇 개 있는지 파악.
--				-- 컬럼명을 '매니저ID'로
select distinct manager_id from employees;

--------------------------------------------------------
select distinct manager_id from employees order by manager_id desc;
select * from employees order by salary desc;

SELECT FIRST_NAME, LAST_NAME FROM EMPLOYEES;

-- 연습3.	사원의 이름_성을 조회하되, 업무별로 묶어서(끼리끼리) 출력.
SELECT first_name || ' ' || last_name, job_id 업무id
FROM employees
ORDER BY job_id DESC;

-- 연습4.	"부서별로" 사원의 부서ID, 이름_성, 급여를 조회하되,
--	"급여가 높은 사원부터" 조회.
--	- 1차 정렬기준 : 부서ID
--	- 2차 정렬기준 : 급여 (내림차순)
SELECT department_id 부서id, (first_name || ' ' || last_name) "이름_성",
    salary 급여
FROM employees
ORDER BY department_id ASC, salary DESC;

--연습5.	사원의 이름_성을 조회하되, 성을 기준으로 ABC순으로 정렬하여 조회.
select (first_name || ' ' || last_name) "이름_성" 
from employees
order by last_name asc;

--연습6.	사원의 이름_성, 고용일을 조회하되, 최근에 고용된 사람 순으로 조회.
select (first_name || ' ' || last_name) "이름_성", hire_date 고용일
from employees
order by hire_date desc;

--연습7.	부서별로 사원의 이름_성, 고용일, 부서ID를 조회하되, 
--        부서별로 최근에 고용된 사람 순으로 조회.
SELECT (first_name || ' ' || last_name) "이름_성",
        hire_date 고용일, department_id 부서id
FROM employees
ORDER BY department_id ASC, hire_date DESC;

--연습.	사원의 이름이 'Bruce'이고 성이 'Ernst'인 사원의 이름_성, 급여, 이메일을 조회.
--연습.	사원의 이름_성이 'Bruce Ernst'인 사원의 이름_성, 급여, 이메일을 조회.
SELECT (first_name || ' ' || last_name) "이름_성",
        salary 급여, email 이메일
FROM employees
--WHERE first_name = 'Bruce' AND last_name = 'Ernst';
WHERE (first_name || ' ' || last_name) = 'Bruce Ernst';
--        [주의] (컬럼명 등은 대소문자 구분 안 하지만)
--                문자열 데이터는 대/소문자를 구분함.
--        [주의] ==이 아님!
--        [주의★★★] WHERE절에서는 alias를 사용하지 못함! (이해)

SELECT * FROM employees WHERE first_name = 'Steven';
SELECT * FROM employees WHERE first_name like 'St%';
SELECT * FROM employees WHERE first_name like '%even%';
SELECT * FROM employees WHERE first_name like 'St____';

--연습1.	성이 K로 시작하는 사원의 이름_성, 폰번호를 조회.
SELECT (first_name || ' ' || last_name) "이름_성", phone_number 폰번호
FROM employees
WHERE last_name like 'K%';

--연습2.	이름이 er로 끝나는 사원의 이름_성, 입사일을 조회.
SELECT (first_name || ' ' || last_name) "이름_성",
        hire_date 입사일
FROM employees
WHERE first_name like '%er';

--연습3.	성이 4글자인 사원의 이름, 성을 조회.
SELECT first_name 이름, last_name 성
FROM employees
WHERE last_name like '____';

--Ex.	급여가 8000달러 이상이면서 9000달러 이하인 사원의
--	이름, 성, 급여, 입사일을 조회.
SELECT first_name 이름, last_name 성, salary 급여, hire_date 입사일
FROM employees
WHERE salary BETWEEN 8000 AND 9000;
--WHERE salary >= 8000 AND salary <= 9000;

--Ex.	부서ID가 10, 20, 또는 30인 사원들의
--	이름, 성, 급여, 부서ID를 조회.
SELECT first_name 이름, last_name 성, salary 급여, department_id 부서id
FROM employees
WHERE department_id IN (10,20,30);
--WHERE department_id = 10 OR department_id = 20 OR department_id = 30;

--SELECT 10+20 FROM DUAL;
--SELECT 1 || 1 FROM DUAL;
--SELECT (1 || 1) + 1 FROM DUAL;


--------------------------------------------------------------------
Oracle: User1026

SELECT * FROM member;

-- <회원가입>
-- ID : YG
-- PW : 1234
-- NAME : 와이지
--INSERT INTO member(id,pw,name) 
--VALUES ('YG',1234,'와이지');
--INSERT INTO member VALUES ('YG2',12345,'와이지2');
SELECT * FROM member;

1) YG2 인 ROW의 ID를 YG20 으로 수정:
--UPDATE member SET ID='YG20' WHERE ID='YG2';
2) 이름이 '와이지2'인 ROW의 PW를 1234 로 수정:
--UPDATE member SET pw=1234 WHERE name='와이지2';

이름에 숫자 2가 포함된 모든 회원들의 정보를 삭제:
--DELETE FROM member WHERE name like '%2%';

commit;	 -- 참고. (뒤에서 배워요)

---------------------------------------------------------
							끝.











